
from django.shortcuts import render,redirect
from django.contrib.auth.forms import UserCreationForm
from django.urls import reverse_lazy
from django.views import generic
from .models import Profile
from .forms import SignUpForm,ProfileForm,EmailForm,ResetForm,PasswordresetForm
from django.contrib.auth import login, authenticate
from django.contrib.auth.decorators import login_required
from social.models import Post
from django.contrib.auth.models import User
from django.core.mail import send_mail
from django.core.exceptions import ObjectDoesNotExist
from ipaddr import client_ip
from django.contrib.auth.decorators import login_required

class SignUp(generic.CreateView):
    form_class = UserCreationForm
    success_url = reverse_lazy('login')
    template_name = 'signup.html'
def signup(request):
    if request.method == 'POST':
        form = SignUpForm(request.POST)
        if form.is_valid():
            user = form.save()
            user.refresh_from_db()  # load the profile instance created by the signal
            user.profile.name = form.cleaned_data.get('name')
            user.profile.emailconfirmed='True'
            user.profile.ipaddress=client_ip(request)
            user.save()
            raw_password = form.cleaned_data.get('password1')
            user = authenticate(username=user.username, password=raw_password)
            login(request, user)
            return redirect('home')
    else:
        form = SignUpForm()
    return render(request, 'signup.html', {'form': form})
@login_required

def profile(request):
    post=Post.objects.filter(user=request.user)
    post=post.order_by('date_posted').reverse()

    print(post)
    return render(request,'profiles/profile.html',{'post':post})

@login_required(login_url='login')
def update_profile(request):

    if request.method == 'POST':
        profile_form = ProfileForm(request.POST,request.FILES,instance=request.user.profile)
        #post = Post.objects.filter(user=request.user)
        #post = post.order_by('date_posted').reverse()
        profileuser = Profile.objects.get(user_id=request.user)
        if profile_form.is_valid():

            profile_form.save()

            return redirect('profilevisit',profileuser.user)
        else:
            pass

    else:

        profile_form = ProfileForm(instance=request.user.profile)
    return render(request, 'profiles/updateprofile.html', {

        'profile_form': profile_form
    })

@login_required(login_url='login')
def editemail(request):
    if request.method=='POST':
        user=request.user
        form=EmailForm(request.POST,instance=request.user)
        if form.is_valid():
            form=form.save(commit=False)
            emailaddress = user.email
            if emailaddress != ' ':
                request.user.profile.emailconfirmed = 'True'
                send_mail('Potato','An email edit is activated on your potato account . If it wasn\'t you , please reset your account password by loging in to your account.Or if it was you disregard this email   \n This is an autogenerated email','noreply.potatosys@gmail.com',[emailaddress],fail_silently=False)
            form.save()
            return redirect('profilevisit',request.user.profile.user)
    else:
        form=EmailForm(instance=request.user)
    return render(request,'setupemail.html',{'form':form})








